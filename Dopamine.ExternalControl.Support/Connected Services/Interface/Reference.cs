//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dopamine.ExternalControl.Support.Interface {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Track", Namespace="http://schemas.datacontract.org/2004/07/Dopamine.Common.Database.Entities")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Dopamine.ExternalControl.Support.Interface.PlayableTrack))]
    public partial class Track : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long AlbumIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ArtistIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> BitRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DateAddedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DateFileModifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DateLastSyncedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> DiscCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> DiscNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> FileSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long FolderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long GenreIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> HasLyricsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MetaDataHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MimeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> NeedsIndexingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SafePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> SampleRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> TrackCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TrackIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> TrackNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrackTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> YearField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long AlbumID {
            get {
                return this.AlbumIDField;
            }
            set {
                if ((this.AlbumIDField.Equals(value) != true)) {
                    this.AlbumIDField = value;
                    this.RaisePropertyChanged("AlbumID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ArtistID {
            get {
                return this.ArtistIDField;
            }
            set {
                if ((this.ArtistIDField.Equals(value) != true)) {
                    this.ArtistIDField = value;
                    this.RaisePropertyChanged("ArtistID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> BitRate {
            get {
                return this.BitRateField;
            }
            set {
                if ((this.BitRateField.Equals(value) != true)) {
                    this.BitRateField = value;
                    this.RaisePropertyChanged("BitRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DateAdded {
            get {
                return this.DateAddedField;
            }
            set {
                if ((this.DateAddedField.Equals(value) != true)) {
                    this.DateAddedField = value;
                    this.RaisePropertyChanged("DateAdded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DateFileModified {
            get {
                return this.DateFileModifiedField;
            }
            set {
                if ((this.DateFileModifiedField.Equals(value) != true)) {
                    this.DateFileModifiedField = value;
                    this.RaisePropertyChanged("DateFileModified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DateLastSynced {
            get {
                return this.DateLastSyncedField;
            }
            set {
                if ((this.DateLastSyncedField.Equals(value) != true)) {
                    this.DateLastSyncedField = value;
                    this.RaisePropertyChanged("DateLastSynced");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> DiscCount {
            get {
                return this.DiscCountField;
            }
            set {
                if ((this.DiscCountField.Equals(value) != true)) {
                    this.DiscCountField = value;
                    this.RaisePropertyChanged("DiscCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> DiscNumber {
            get {
                return this.DiscNumberField;
            }
            set {
                if ((this.DiscNumberField.Equals(value) != true)) {
                    this.DiscNumberField = value;
                    this.RaisePropertyChanged("DiscNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((this.FileSizeField.Equals(value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FolderID {
            get {
                return this.FolderIDField;
            }
            set {
                if ((this.FolderIDField.Equals(value) != true)) {
                    this.FolderIDField = value;
                    this.RaisePropertyChanged("FolderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long GenreID {
            get {
                return this.GenreIDField;
            }
            set {
                if ((this.GenreIDField.Equals(value) != true)) {
                    this.GenreIDField = value;
                    this.RaisePropertyChanged("GenreID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> HasLyrics {
            get {
                return this.HasLyricsField;
            }
            set {
                if ((this.HasLyricsField.Equals(value) != true)) {
                    this.HasLyricsField = value;
                    this.RaisePropertyChanged("HasLyrics");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MetaDataHash {
            get {
                return this.MetaDataHashField;
            }
            set {
                if ((object.ReferenceEquals(this.MetaDataHashField, value) != true)) {
                    this.MetaDataHashField = value;
                    this.RaisePropertyChanged("MetaDataHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MimeType {
            get {
                return this.MimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MimeTypeField, value) != true)) {
                    this.MimeTypeField = value;
                    this.RaisePropertyChanged("MimeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> NeedsIndexing {
            get {
                return this.NeedsIndexingField;
            }
            set {
                if ((this.NeedsIndexingField.Equals(value) != true)) {
                    this.NeedsIndexingField = value;
                    this.RaisePropertyChanged("NeedsIndexing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SafePath {
            get {
                return this.SafePathField;
            }
            set {
                if ((object.ReferenceEquals(this.SafePathField, value) != true)) {
                    this.SafePathField = value;
                    this.RaisePropertyChanged("SafePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> SampleRate {
            get {
                return this.SampleRateField;
            }
            set {
                if ((this.SampleRateField.Equals(value) != true)) {
                    this.SampleRateField = value;
                    this.RaisePropertyChanged("SampleRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> TrackCount {
            get {
                return this.TrackCountField;
            }
            set {
                if ((this.TrackCountField.Equals(value) != true)) {
                    this.TrackCountField = value;
                    this.RaisePropertyChanged("TrackCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TrackID {
            get {
                return this.TrackIDField;
            }
            set {
                if ((this.TrackIDField.Equals(value) != true)) {
                    this.TrackIDField = value;
                    this.RaisePropertyChanged("TrackID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> TrackNumber {
            get {
                return this.TrackNumberField;
            }
            set {
                if ((this.TrackNumberField.Equals(value) != true)) {
                    this.TrackNumberField = value;
                    this.RaisePropertyChanged("TrackNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TrackTitle {
            get {
                return this.TrackTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TrackTitleField, value) != true)) {
                    this.TrackTitleField = value;
                    this.RaisePropertyChanged("TrackTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> Year {
            get {
                return this.YearField;
            }
            set {
                if ((this.YearField.Equals(value) != true)) {
                    this.YearField = value;
                    this.RaisePropertyChanged("Year");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayableTrack", Namespace="http://schemas.datacontract.org/2004/07/Dopamine.Common.Database")]
    [System.SerializableAttribute()]
    public partial class PlayableTrack : Dopamine.ExternalControl.Support.Interface.Track {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlbumArtistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlbumTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> AlbumYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtistNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> DateLastPlayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenreNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> LoveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> PlayCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> RatingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> SkipCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlbumArtist {
            get {
                return this.AlbumArtistField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumArtistField, value) != true)) {
                    this.AlbumArtistField = value;
                    this.RaisePropertyChanged("AlbumArtist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlbumTitle {
            get {
                return this.AlbumTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumTitleField, value) != true)) {
                    this.AlbumTitleField = value;
                    this.RaisePropertyChanged("AlbumTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> AlbumYear {
            get {
                return this.AlbumYearField;
            }
            set {
                if ((this.AlbumYearField.Equals(value) != true)) {
                    this.AlbumYearField = value;
                    this.RaisePropertyChanged("AlbumYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtistName {
            get {
                return this.ArtistNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistNameField, value) != true)) {
                    this.ArtistNameField = value;
                    this.RaisePropertyChanged("ArtistName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> DateLastPlayed {
            get {
                return this.DateLastPlayedField;
            }
            set {
                if ((this.DateLastPlayedField.Equals(value) != true)) {
                    this.DateLastPlayedField = value;
                    this.RaisePropertyChanged("DateLastPlayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GenreName {
            get {
                return this.GenreNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GenreNameField, value) != true)) {
                    this.GenreNameField = value;
                    this.RaisePropertyChanged("GenreName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> Love {
            get {
                return this.LoveField;
            }
            set {
                if ((this.LoveField.Equals(value) != true)) {
                    this.LoveField = value;
                    this.RaisePropertyChanged("Love");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> PlayCount {
            get {
                return this.PlayCountField;
            }
            set {
                if ((this.PlayCountField.Equals(value) != true)) {
                    this.PlayCountField = value;
                    this.RaisePropertyChanged("PlayCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> Rating {
            get {
                return this.RatingField;
            }
            set {
                if ((this.RatingField.Equals(value) != true)) {
                    this.RatingField = value;
                    this.RaisePropertyChanged("Rating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> SkipCount {
            get {
                return this.SkipCountField;
            }
            set {
                if ((this.SkipCountField.Equals(value) != true)) {
                    this.SkipCountField = value;
                    this.RaisePropertyChanged("SkipCount");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="ExternalControl", ConfigurationName="Interface.IExternalControlServer", CallbackContract=typeof(Dopamine.ExternalControl.Support.Interface.IExternalControlServerCallback))]
    public interface IExternalControlServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/RegisterClient", ReplyAction="ExternalControl/IExternalControlServer/RegisterClientResponse")]
        string RegisterClient();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/RegisterClient", ReplyAction="ExternalControl/IExternalControlServer/RegisterClientResponse")]
        System.Threading.Tasks.Task<string> RegisterClientAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ExternalControl/IExternalControlServer/DeregisterClient")]
        void DeregisterClient(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ExternalControl/IExternalControlServer/DeregisterClient")]
        System.Threading.Tasks.Task DeregisterClientAsync(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/PlayNext", ReplyAction="ExternalControl/IExternalControlServer/PlayNextResponse")]
        void PlayNext();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/PlayNext", ReplyAction="ExternalControl/IExternalControlServer/PlayNextResponse")]
        System.Threading.Tasks.Task PlayNextAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/PlayPrevious", ReplyAction="ExternalControl/IExternalControlServer/PlayPreviousResponse")]
        void PlayPrevious();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/PlayPrevious", ReplyAction="ExternalControl/IExternalControlServer/PlayPreviousResponse")]
        System.Threading.Tasks.Task PlayPreviousAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/SetMute", ReplyAction="ExternalControl/IExternalControlServer/SetMuteResponse")]
        void SetMute(bool mute);
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/SetMute", ReplyAction="ExternalControl/IExternalControlServer/SetMuteResponse")]
        System.Threading.Tasks.Task SetMuteAsync(bool mute);
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/PlayOrPause", ReplyAction="ExternalControl/IExternalControlServer/PlayOrPauseResponse")]
        void PlayOrPause();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/PlayOrPause", ReplyAction="ExternalControl/IExternalControlServer/PlayOrPauseResponse")]
        System.Threading.Tasks.Task PlayOrPauseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/GetIsStopped", ReplyAction="ExternalControl/IExternalControlServer/GetIsStoppedResponse")]
        bool GetIsStopped();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/GetIsStopped", ReplyAction="ExternalControl/IExternalControlServer/GetIsStoppedResponse")]
        System.Threading.Tasks.Task<bool> GetIsStoppedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/GetIsPlaying", ReplyAction="ExternalControl/IExternalControlServer/GetIsPlayingResponse")]
        bool GetIsPlaying();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/GetIsPlaying", ReplyAction="ExternalControl/IExternalControlServer/GetIsPlayingResponse")]
        System.Threading.Tasks.Task<bool> GetIsPlayingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/GetProgress", ReplyAction="ExternalControl/IExternalControlServer/GetProgressResponse")]
        double GetProgress();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/GetProgress", ReplyAction="ExternalControl/IExternalControlServer/GetProgressResponse")]
        System.Threading.Tasks.Task<double> GetProgressAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/SetProgress", ReplyAction="ExternalControl/IExternalControlServer/SetProgressResponse")]
        void SetProgress(double progress);
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/SetProgress", ReplyAction="ExternalControl/IExternalControlServer/SetProgressResponse")]
        System.Threading.Tasks.Task SetProgressAsync(double progress);
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/GetCurrenTrack", ReplyAction="ExternalControl/IExternalControlServer/GetCurrenTrackResponse")]
        Dopamine.ExternalControl.Support.Interface.PlayableTrack GetCurrenTrack();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/GetCurrenTrack", ReplyAction="ExternalControl/IExternalControlServer/GetCurrenTrackResponse")]
        System.Threading.Tasks.Task<Dopamine.ExternalControl.Support.Interface.PlayableTrack> GetCurrenTrackAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/GetCurrentTrackArtworkPath", ReplyAction="ExternalControl/IExternalControlServer/GetCurrentTrackArtworkPathResponse")]
        string GetCurrentTrackArtworkPath(string artworkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/GetCurrentTrackArtworkPath", ReplyAction="ExternalControl/IExternalControlServer/GetCurrentTrackArtworkPathResponse")]
        System.Threading.Tasks.Task<string> GetCurrentTrackArtworkPathAsync(string artworkId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExternalControlServerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/SendHeartBeat", ReplyAction="ExternalControl/IExternalControlServer/SendHeartBeatResponse")]
        void SendHeartBeat();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/RaiseEventPlaybackSuccess", ReplyAction="ExternalControl/IExternalControlServer/RaiseEventPlaybackSuccessResponse")]
        void RaiseEventPlaybackSuccess();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/RaiseEventPlaybackStopped", ReplyAction="ExternalControl/IExternalControlServer/RaiseEventPlaybackStoppedResponse")]
        void RaiseEventPlaybackStopped();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/RaiseEventPlaybackPaused", ReplyAction="ExternalControl/IExternalControlServer/RaiseEventPlaybackPausedResponse")]
        void RaiseEventPlaybackPaused();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/RaiseEventPlaybackResumed", ReplyAction="ExternalControl/IExternalControlServer/RaiseEventPlaybackResumedResponse")]
        void RaiseEventPlaybackResumed();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/RaiseEventPlaybackProgressChanged", ReplyAction="ExternalControl/IExternalControlServer/RaiseEventPlaybackProgressChangedResponse")]
        void RaiseEventPlaybackProgressChanged();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/RaiseEventPlaybackVolumeChanged", ReplyAction="ExternalControl/IExternalControlServer/RaiseEventPlaybackVolumeChangedResponse")]
        void RaiseEventPlaybackVolumeChanged();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/RaiseEventPlaybackMuteChanged", ReplyAction="ExternalControl/IExternalControlServer/RaiseEventPlaybackMuteChangedResponse")]
        void RaiseEventPlaybackMuteChanged();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/RaiseEventPlayingTrackPlaybackInfoChanged", ReplyAction="ExternalControl/IExternalControlServer/RaiseEventPlayingTrackPlaybackInfoChangedR" +
            "esponse")]
        void RaiseEventPlayingTrackPlaybackInfoChanged();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IExternalControlServer/RaiseEventPlayingTrackArtworkChanged", ReplyAction="ExternalControl/IExternalControlServer/RaiseEventPlayingTrackArtworkChangedRespon" +
            "se")]
        void RaiseEventPlayingTrackArtworkChanged();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExternalControlServerChannel : Dopamine.ExternalControl.Support.Interface.IExternalControlServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExternalControlServerClient : System.ServiceModel.DuplexClientBase<Dopamine.ExternalControl.Support.Interface.IExternalControlServer>, Dopamine.ExternalControl.Support.Interface.IExternalControlServer {
        
        public ExternalControlServerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ExternalControlServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ExternalControlServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ExternalControlServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ExternalControlServerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string RegisterClient() {
            return base.Channel.RegisterClient();
        }
        
        public System.Threading.Tasks.Task<string> RegisterClientAsync() {
            return base.Channel.RegisterClientAsync();
        }
        
        public void DeregisterClient(string sessionId) {
            base.Channel.DeregisterClient(sessionId);
        }
        
        public System.Threading.Tasks.Task DeregisterClientAsync(string sessionId) {
            return base.Channel.DeregisterClientAsync(sessionId);
        }
        
        public void PlayNext() {
            base.Channel.PlayNext();
        }
        
        public System.Threading.Tasks.Task PlayNextAsync() {
            return base.Channel.PlayNextAsync();
        }
        
        public void PlayPrevious() {
            base.Channel.PlayPrevious();
        }
        
        public System.Threading.Tasks.Task PlayPreviousAsync() {
            return base.Channel.PlayPreviousAsync();
        }
        
        public void SetMute(bool mute) {
            base.Channel.SetMute(mute);
        }
        
        public System.Threading.Tasks.Task SetMuteAsync(bool mute) {
            return base.Channel.SetMuteAsync(mute);
        }
        
        public void PlayOrPause() {
            base.Channel.PlayOrPause();
        }
        
        public System.Threading.Tasks.Task PlayOrPauseAsync() {
            return base.Channel.PlayOrPauseAsync();
        }
        
        public bool GetIsStopped() {
            return base.Channel.GetIsStopped();
        }
        
        public System.Threading.Tasks.Task<bool> GetIsStoppedAsync() {
            return base.Channel.GetIsStoppedAsync();
        }
        
        public bool GetIsPlaying() {
            return base.Channel.GetIsPlaying();
        }
        
        public System.Threading.Tasks.Task<bool> GetIsPlayingAsync() {
            return base.Channel.GetIsPlayingAsync();
        }
        
        public double GetProgress() {
            return base.Channel.GetProgress();
        }
        
        public System.Threading.Tasks.Task<double> GetProgressAsync() {
            return base.Channel.GetProgressAsync();
        }
        
        public void SetProgress(double progress) {
            base.Channel.SetProgress(progress);
        }
        
        public System.Threading.Tasks.Task SetProgressAsync(double progress) {
            return base.Channel.SetProgressAsync(progress);
        }
        
        public Dopamine.ExternalControl.Support.Interface.PlayableTrack GetCurrenTrack() {
            return base.Channel.GetCurrenTrack();
        }
        
        public System.Threading.Tasks.Task<Dopamine.ExternalControl.Support.Interface.PlayableTrack> GetCurrenTrackAsync() {
            return base.Channel.GetCurrenTrackAsync();
        }
        
        public string GetCurrentTrackArtworkPath(string artworkId) {
            return base.Channel.GetCurrentTrackArtworkPath(artworkId);
        }
        
        public System.Threading.Tasks.Task<string> GetCurrentTrackArtworkPathAsync(string artworkId) {
            return base.Channel.GetCurrentTrackArtworkPathAsync(artworkId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="ExternalControl", ConfigurationName="Interface.IFftDataServer")]
    public interface IFftDataServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IFftDataServer/GetFftData", ReplyAction="ExternalControl/IFftDataServer/GetFftDataResponse")]
        bool GetFftData();
        
        [System.ServiceModel.OperationContractAttribute(Action="ExternalControl/IFftDataServer/GetFftData", ReplyAction="ExternalControl/IFftDataServer/GetFftDataResponse")]
        System.Threading.Tasks.Task<bool> GetFftDataAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFftDataServerChannel : Dopamine.ExternalControl.Support.Interface.IFftDataServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FftDataServerClient : System.ServiceModel.ClientBase<Dopamine.ExternalControl.Support.Interface.IFftDataServer>, Dopamine.ExternalControl.Support.Interface.IFftDataServer {
        
        public FftDataServerClient() {
        }
        
        public FftDataServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FftDataServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FftDataServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FftDataServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool GetFftData() {
            return base.Channel.GetFftData();
        }
        
        public System.Threading.Tasks.Task<bool> GetFftDataAsync() {
            return base.Channel.GetFftDataAsync();
        }
    }
}
